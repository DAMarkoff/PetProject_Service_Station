openapi: 3.0.0
servers:
  - description: PetProject
    url: http://23.88.52.139:5006
info:
  description: |
      # in progress...
      **If you find any defects or have suggestions for improvement, feel free to fill out the Google forms below.**

      **I will be very grateful for any help. Thanks.**
      - [Bug Report Google Form](https://docs.google.com/forms/d/1Nh_-KE00CpirA_I4WLBXR5gWD5Gkl7KaT2u72x2CC7o/edit?usp=sharing)
      - [Suggestions for improvement](https://docs.google.com/forms/d/1mjiIaQwa0_C0FiihzpKBFCOUvVSR_PjzusJMgmsEQkM/edit?usp=sharing)
      - [Readme Google Doc](https://docs.google.com/document/d/1j8iKLZLj_GRenQDMlHrvDHJkvNcg7s8gzdzcO8gdpiA/edit?usp=sharing)
  version: 0.0.1
  title: Service Station
  contact:
    email: dmitri.markoff@gmail.com

#----------------------------------------------------------------------------------------------

tags:
  - name: "Users"
    description: "This suit contains API methods for operations with a user account and requests for information about user data"
  - name: "Warehouse"
    description: "Shows info about storage shelves"
  - name: "Vehicle"
    description: "This suit contains API methods for operations with user vehicles: adding new, deleting or updating information"
  - name: "Storage order"
    description: "This suit contains API methods for operations with user tire storage orders: adding new or deleting"
  - name: "Tire service order"
    description: "This suit contains API methods for operations with user tire service orders: adding new or deleting"
  - name: "Administrator's Corner"
    description: "Authorized only )"

#----------------------------------------------------------------------------------------------

paths:
  /users:
    get:
      tags:
      - "Users"
      summary: A JSON array of user(s) data
      description: |
        - If the 'user_id' has not been provided, returns short info about all users
        - If the 'user_id' has been provided - the 'active' parameter will be ignored
        - If the 'active' parameter is 'yes' - returns info about active user(s) only
        - If the 'active' parameter is 'no' - returns info about inactive user(s) only
        - If the 'active' parameter is blank - returns info about both active and inactive users
      parameters:
      - name: user_id
        in: query
        required: false
        description: '- *optional* - the user_id must consist only of digits'
        schema:
          type: integer
      - name: active
        in: query
        required: false
        description: '- *optional* - you can fill in "yes", "no" or leave blank'
        schema:
          type: string
          enum:
            - yes
            - no
          minLength: 2
          maxLength: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/users'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - "Users"
      summary: Register a new user
      description: Please, remember your password.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: |
                      - ***required*** - 1 - 30 chars, can include the space and the .,'- chars
                  minLength: 1
                  maxLength: 30
                last_name:
                  type: string
                  description: |
                      - ***required*** - 1 - 30 chars, can include the space and the .,'- chars
                  minLength: 1
                  maxLength: 30
                email:
                  type: string
                  description: |
                      - ***required*** - The email must contain @ and . chars
                  minLength: 4
                  maxLength: 100
                password:
                  type: string
                  description: |
                      - ***required*** - 8 - 32 chars, must contain at least one digit, one uppercase letter, one lowercase letter, one of the symbols $@#!%'
                  minLength: 8
                  maxLength: 32
                phone:
                  type: string
                  description: |
                      - ***required*** - 1 - 30 chars, validation has not been implemented yet
                  minLength: 1
                  maxLength: 30
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
      - "Users"
      summary: Change the user info.
      description: |
                *This can only be done by the logged user.*
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 1
                  maxLength: 36
                new_first_name:
                  type: string
                  description: |
                      - *optional* - 1 - 30 chars, can include the space and the .,'- chars
                  minLength: 1
                  maxLength: 30
                new_last_name:
                  type: string
                  description: |
                      - *optional* - 1 - 30 chars, can include the space and the .,'- chars
                  minLength: 1
                  maxLength: 30
                new_email:
                  type: string
                  description: |
                      - *optional* - The email must contain @ and . chars
                  minLength: 4
                  maxLength: 100
                new_phone:
                  type: string
                  description: |
                      - *optional* - 1 - 30 chars, validation has not been implemented yet
                  minLength: 1
                  maxLength: 30
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_changed'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /vehicle:
    post:
      tags:
      - "Vehicle"
      summary: Register the user's new vehicle.
      description: |
                *This can only be done by the logged user.*
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 1
                  maxLength: 36
                vehicle_name:
                  type: string
                  description: |
                      - ***required*** -Choose the type of your vehicle.
                  minLength: 1
                  maxLength: 20
                  enum:
                    - bus
                    - truck
                    - car
                    - jeep
                size_name:
                  type: integer
                  description: |
                      - ***required*** -Choose the size of your tires
                  enum:
                    - 14
                    - 15
                    - 16
                    - 17
                    - 18
                    - 19
                    - 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vehicle'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
      - "Vehicle"
      summary: 'Change your vehicle type or tire size'
      description: |
                - You can change the vehicle_name or/and size_name.
                - *This can only be done by the logged user.*
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: |
                     - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  format: uuid
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 1
                  maxLength: 36
                user_vehicle_id:
                  type: integer
                  description: |
                     - ***required*** - ID of your vehicle that needs to be updated
                new_vehicle_name:
                  type: string
                  description: |
                      - *optional* - Choose the type of your vehicle.
                  minLength: 1
                  maxLength: 20
                  enum:
                    - bus
                    - truck
                    - car
                    - jeep
                new_size_name:
                  type: integer
                  description: |
                      - *optional* - Choose the size of your tires
                  enum:
                    - 14
                    - 15
                    - 16
                    - 17
                    - 18
                    - 19
                    - 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vehicle_changed'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - "Vehicle"
      summary: Delete your vehicle
      description: |
        The OpenAPI 3.0 Specification and Swagger tools does not implement DELETE requests with a request body. Open API 3.1 will fix that, see github.com/OAI/OpenAPI-Specification/pull/2117.
        - ***To delete it, you must provide an email, token and user_vehicle_id in form-data***
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /users/login:
    post:
      tags:
      - "Users"
      summary: 'Log in'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                password:
                  type: string
                  description: |
                      - ***required*** - Enter your password. If you have forgotten your password, feel free to contact me.
                  minLength: 8
                  maxLength: 32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hello'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /users/deactivate_user:
    post:
      tags:
      - "Users"
      summary: Mark yourself as an inactive user
      description: WARNING! Only the admin can mark you as an active user again. *This can only be done by the logged user.*
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 1
                  maxLength: 36
                ARE_YOU_SURE?:
                  type: string
                  description: |
                      - ***required*** - Are you sure? Enter "yes" or "no"
                  enum:
                    - yes
                    - no
                  minLength: 2
                  maxLength: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  confirmation:
                    type: string
              example: 'User {first_name last_name} has been successfully deactivated'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

#  /users/activate:
#    post:
#      tags:
#      - "Users"
#      summary: Mark the user as active
#      description: 'Note: Only the admin can mark you as an active user'
#      requestBody:
#        required: true
#        content:
#          multipart/form-data:
#            schema:
#              type: object
#              properties:
#                email:
#                  type: string
#                  description: |
#                      - ***required*** - Enter your email
#                  minLength: 4
#                  maxLength: 100
#                token:
#                  type: string
#                  description: |
#                    - ***required*** - Enter your token
#                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
#                  minLength: 1
#                  maxLength: 36
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  confirmation:
#                    type: string
#              example: 'User {first_name last_name} has been successfully activated'
#        '400':
#          description: bad request
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'
#        '405':
#          description: method not allowed
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'
#        '401':
#          description: unauthorized
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'
#        '503':
#          description: Could not connect to the database
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /users/user_info:
    post:
      tags:
      - "Users"
      summary: 'Get full user information'
      description: |
          Provides complete information about the logged in user include user vehicles, storage orders and service orders
          *This can only be done by the logged user.*
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                    - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 1
                  maxLength: 36
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_info'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /storage_order:
    post:
      tags:
      - "Storage order"
      summary: 'Create a new storage order'
      description: |
            - The size_name OR user_vehicle_id is required. If both of them were provided - the size_name will be ignored.
            - *This can only be done by the logged user.*
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 1
                  maxLength: 36
                start_date:
                  type: string
                  description: |
                     - ***required*** - Initial storage start date
                     - format: YYYY-MM-DD, for example - 2021-10-30
                  minLength: 10
                  maxLength: 10
                stop_date:
                  type: string
                  description: |
                      - ***required*** - End date of storage start
                      - format: YYYY-MM-DD, for example - 2021-10-30
                  minLength: 10
                  maxLength: 10
                size_name:
                  type: integer
                  description: |
                      - ***required*** -Choose the size of your tires
                  enum:
                    - 14
                    - 15
                    - 16
                    - 17
                    - 18
                    - 19
                    - 20
                user_vehicle_id:
                  type: integer
                  description: |
                      - ***required*** - ID of your vehicle whose tires will be stored
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage_order'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      tags:
      - "Storage order"
      summary: 'Change your storage order'
      description: |
            ***ON MAINTENANCE***
      responses:
        '200':
          description: Successful operation
#====================================================================================================
#                                           ON MAINTENANCE
#====================================================================================================
#    put:
#      tags:
#      - storage order
#      summary: Create new storage order
#      description: |
#            *This can only be done by the logged user.*
#      requestBody:
#        required: true
#        content:
#          multipart/form-data:
#            schema:
#              type: object
#              properties:
#                email:
#                  type: string
#                  format: email
#                  description: |
#                      ***required*** - Enter your email
#                token:
#                  type: string
#                  format: uuid
#                  description: |
#                      ***required*** - Enter your token
#                  example: faf353cd-2e44-46c5-9864-7c53426eb58a
#                st_ord_id:
#                  type: string
#                  description: |
#                      ***required*** - ID of your storage order that needs to be updated
#                start_date:
#                  type: string
#                  description: |
#                      *optional* - New initial storage start date
#                stop_date:
#                  type: string
#                  description: |
#                      *optional* - New end date of storage start
#                size_name:
#                  type: integer
#                  description: |
#                      *optional* - Choose the other size of your tires
#                  enum:
#                    - 14
#                    - 15
#                    - 16
#                    - 17
#                    - 18
#                    - 19
#                    - 20
#                # u_veh_id:
#                #   type: string
#                #   description: |
#                #       *optional* - ID of your vehicle whose tires will be stored
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/storage_order_changed'
#        '400':
#          description: bad request
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'
#        '405':
#          description: method not allowed
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'
#        '401':
#          description: unauthorized
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/error'
#        '503':
#          description: Could not connect to the database
#          content:
#            application/json:
#              schema:
#                 $ref: '#/components/schemas/error'
    delete:
      tags:
      - "Storage order"
      summary: 'Delete your storage order'
      description: |
        The OpenAPI 3.0 Specification and Swagger tools does not implement DELETE requests with a request body. Open API 3.1 will fix that, see github.com/OAI/OpenAPI-Specification/pull/2117
        - ***To delete it, you must provide an email, token and storage_order_id in form-data***
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /tire_service_order:
    post:
      tags:
      - "Tire service order"
      summary: 'Create a new tire service order'
      description: |
            *This can only be done by the logged user.*
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  format: uuid
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 4
                  maxLength: 36
                order_date:
                  type: string
                  description: |
                      - ***required*** - Tire service order date
                      - format: YYYY-MM-DD HH-MM, for example - 2021-10-30 14:30
                  minLength: 16
                  maxLength: 16
                order_type:
                  type: string
                  nullable: false
                  description: |
                      - ***required*** - Type of your service order
                  enum:
                  - tire change
                  - tire repair
                user_vehicle_id:
                  type: integer
                  description: |
                      - ***required*** - ID of your vehicle
                numbers_of_wheels:
                  type: integer
                  description: |
                      - ***required*** - Number of wheels for repair or tire fitting
                removing_installing_wheels:
                  type: string
                  description: |
                      - ***required*** - Wheel removal and installation service
                  enum:
                  - yes
                  - no
                tubeless:
                  type: string
                  description: |
                      - ***required*** - If you have a tubeless tire, then a camera repair service will be added to the tire repair service order
                  enum:
                  - yes
                  - no
                balancing:
                  type: string
                  description: |
                      - ***required*** - Wheel balancing service
                  enum:
                  - yes
                  - no
                wheel_alignment:
                  type: string
                  description: |
                      - ***required*** - Wheel alignment service
                  enum:
                  - yes
                  - no
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tire_service_order'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - "Tire service order"
      summary: Change your tire service order
      description: |
            ***ON MAINTENANCE.***
      responses:
        '200':
          description: Successful operation

#====================================================================================================
#                                           ON MAINTENANCE
#====================================================================================================
    # put:
    #   tags:
    #   - "Tire service order"
    #   summary: Create new tire service order
    #   description: |
    #         You can change the date and time, as well as the vehicle in your tire order
    #         *This can only be done by the logged user.*
    #   requestBody:
    #     required: true
    #     content:
    #       multipart/form-data:
    #         schema:
    #           type: object
    #           properties:
    #             email:
    #               type: string
    #               format: email
    #               description: |
    #                   ***required*** - Enter your email
    #             token:
    #               type: string
    #               format: uuid
    #               description: |
    #                 - ***required*** - Enter your token
    #                 - example - faf353cd-2e44-46c5-9864-7c53426eb58a
    #             serv_order_id:
    #               type: string
    #               description: |
    #                   ***required*** - ID of your tire service order that needs to be updated
    #             new_order_date:
    #               type: string
    #               description: |
    #                   *optional* - New tire service order date
    #             new_u_veh_id:
    #               type: string
    #               description: |
    #                   *optional* - Fill in another vehicle id
    #   responses:
    #     '200':
    #       description: Successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/tire_service_order_changed'
    #     '400':
    #       description: bad request
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/error'
    #     '405':
    #       description: method not allowed
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/error'
    #     '401':
    #       description: unauthorized
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/error'
    #     '503':
    #       description: Could not connect to the database
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/error'
    delete:
      tags:
      - "Tire service order"
      summary: Delete your tire service order
      description: |
        The OpenAPI 3.0 Specification and Swagger tools does not implement DELETE requests with a request body. Open API 3.1 will fix that, see github.com/OAI/OpenAPI-Specification/pull/2117
        - ***To delete it, you must provide an email, token and service_order_id in form-data***
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#====================================================================================================
#                                           ON MAINTENANCE
#====================================================================================================

  # /tire_service_order/task:
  #   post:
  #     tags:
  #     - "Tire service order"
  #     summary: You can add, update and delete a tasks in your tire service order
  #     description: |
  #           *This can only be done by the logged user.*
  #     requestBody:
  #       required: true
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #                 format: email
  #                 description: |
  #                     ***required*** - Enter your email
  #               token:
  #                 type: string
  #                 format: uuid
  #                 description: |
  #                   - ***required*** - Enter your token
  #                   - example - faf353cd-2e44-46c5-9864-7c53426eb58a
  #               service_order_id:
  #                 type: string
  #                 description: |
  #                     ***required*** - The id of your tire service order that will be updated
  #               task_name:
  #                 type: string
  #                 description: |
  #                     ***required*** - The task, that will be added to your tire service order
  #               numbers_of_task:
  #                 type: string
  #                 description: |
  #                     ***required*** - The number of the tasks, that will be added to your tire service order
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 confirmation:
  #                   type: string
  #       '400':
  #         description: bad request
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error'
  #       '405':
  #         description: method not allowed
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error'
  #       '401':
  #         description: unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error'
  #       '503':
  #         description: Could not connect to the database
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /warehouse:
    get:
      tags:
        - "Warehouse"
      summary: 'Here you can see the free/occupied shelves of all/certain sizes in the warehouse'
      description: |
                   - if size_name is not filled in, it shows all tire sizes
                   - if available_only is 'yes', it shows only free shelves
                   - if available_only is 'no', it shows only occupied shelves
                   - if available_only neither one nor the other, it shows all free shelves
      parameters:
        - name: size_name
          in: query
          required: false
          description: |
                - *optional* - The size_id must contain only digits
          schema:
            type: integer
        - name: available_only
          in: query
          required: false
          description: |
                - *optional* - The available_only can be 'yes' or 'no'. Or empty.
          schema:
            type: string
            minLength: 0
            maxLength: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/storage_places'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------
#                                 Administrator's Corner
#----------------------------------------------------------------------------------------------

  /admin/push_file:
    post:
      tags:
      - "Administrator's Corner"
      summary: pushes a file onto remote repo
      description: |
        ***this can only be done by an admin***
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 4
                  maxLength: 36
                file_name:
                  type: string
                  description: |
                    - ***required*** - Enter a filename to be pushed
                  minLength: 3
                  maxLength: 36
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Unuccessful operation
          content:
            text/plain:
              schema:
                type: string

#----------------------------------------------------------------------------------------------

  /admin/password:
    post:
      tags:
      - "Administrator's Corner"
      summary: user password recovery
      description: |
        ***this can only be done by an admin***
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 4
                  maxLength: 36
                user_email:
                  type: string
                  format: email
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_email:
                    type: string
                  user_password:
                    type: string
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
      - "Administrator's Corner"
      summary: change the user's password
      description: |
        ***this can only be done by an admin***
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 4
                  maxLength: 36
                user_email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                new_password:
                  type: string
                  description: |
                      - ***required*** - 8 - 32 chars, must contain at least one digit, one uppercase letter, one lowercase letter, one of the symbols $@#!%'
                  minLength: 8
                  maxLength: 32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  email:
                    type: string
                  confirmation:
                    type: string
                    example: 'The password has been changed'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

#----------------------------------------------------------------------------------------------

  /admin/user:
    patch:
      tags:
      - "Administrator's Corner"
      summary: mark the user as active
      description: |
        ***this can only be done by an admin***
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
                token:
                  type: string
                  description: |
                    - ***required*** - Enter your token
                    - example - faf353cd-2e44-46c5-9864-7c53426eb58a
                  minLength: 4
                  maxLength: 36
                user_email:
                  type: string
                  description: |
                      - ***required*** - Enter your email
                  minLength: 4
                  maxLength: 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  confirmation:
                    type: string
                    example: 'User {{ name }} (ID {{ id }}) has been successfully activated'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '405':
          description: method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Could not connect to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - "Administrator's Corner"
      summary: Delete the user
      description: |
        The OpenAPI 3.0 Specification and Swagger tools does not implement DELETE requests with a request body. Open API 3.1 will fix that, see [there](github.com/OAI/OpenAPI-Specification/pull/2117).
         - ***This can only be done be done by an admin***
         - ***To delete it, you must provide an email, token and user_email in form-data***
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/confirmation'

#----------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------

components:
  schemas:
    # tire_service_order_changed:
    #   type: object
    #   properties:
    #     tire service order:
    #       type: string
    #     old_vehicle_id:
    #       type: string
    #     new_vehicle_id:
    #       type: string
    #     old_order_date:
    #       type: string
    #     new_order_date:
    #       type: string
    tire_service_order:
      type: object
      properties:
        service_order_id:
          type: string
        user_vehicle_id:
          type: integer
        manager:
          type: object
          properties:
            manager_id:
              type: integer
            manager_name:
              type: string
            manager_email:
              type: string
            manager_phone:
              type: string
        service_order_type:
          type: string
        order_datetime:
          type: string
        estimated_service_duration:
          type: string
        estimated_end_of_service_datetime:
          type: string
        service_order_cost:
          type: integer
        tasks:
          type: array
          items:
            type: object
            properties:
              task_name:
                type: string
              worker:
                type: object
                properties:
                  worker_id:
                    type: integer
                  worker_name:
                    type: string
                  worker_email:
                    type: string
                  worker_phone:
                    type: string
              task cost:
                type: integer
    storage_order:
      type: object
      properties:
        shelf_id:
          type: integer
        storage_order_id:
          type: integer
        start_date:
          type: string
        stop_date:
          type: string
        storage_order_cost:
          type: integer
    user_info:
      type: object
      properties:
        your_info:
          type: object
          properties:
            id:
              type: integer
            first_name:
              type: string
            last_name:
              type: string
            email:
              type: string
            phone:
              type: string
            group_name:
              type: string
        storage_orders_info:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  storage_order_id:
                    type: integer
                  start_date:
                    type: string
                  stop_date:
                    type: string
                  order cost:
                    type: integer
                  shelf_id:
                    type: integer
        your_vehicle:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  vehicle_id:
                    type: integer
                  vehicle_name:
                    type: string
                  size_name:
                    type: integer
        tire_service_order:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                properties:
                  service_order_id:
                    type: integer
                  service_order_type:
                    type: string
                  start_datetime:
                   type: string
                  stop_datetime:
                   type: string
                  manager:
                    type: object
                    properties:
                      manager_id:
                        type: integer
                      manager_name:
                        type: string
                      manager_email:
                        type: string
                      manager_phone:
                        type: string
                  vehicle:
                    type: object
                    properties:
                      user_vehicle_id:
                        type: integer
                      vehicle_name:
                        type: string
                      size_name:
                        type: string
                  tire_service_order_cost:
                    type: integer
                  tasks:
                    oneOf:
                    - type: string
                    - type: array
                      items:
                        type: object
                        properties:
                          task_name:
                            type: string
                          worker:
                            type: object
                            properties:
                              worker_id:
                                type: integer
                              worker_name:
                                type: string
                              worker_email:
                                type: string
                              worker_phone:
                                type: string
                          task_cost:
                            type: integer
    users:
      type: object
      properties:
        ID:
          type: integer
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        active:
          type: boolean
        group_name:
          type: string
    user_changed:
      type: object
      properties:
        user_id:
          type: integer
        new first name:
          type: string
        old first name:
          type: string
        new last name:
          type: string
        old last name:
          type: string
        new email:
          type: string
        old email:
          type: string
        new phone:
          type: string
        old phone:
          type: string
    vehicle:
      type: object
      properties:
        vehicle_id:
          type: integer
        vehicle_name:
          type: string
        size_name:
          type: integer
    vehicle_changed:
      type: object
      properties:
        vehicle_id:
          type: integer
        old_vehicle_name:
          type: string
        new_vehicle_name:
          type: string
        old_size_name:
          type: integer
        new_size_name:
          type: integer
    storage_places:
      type: object
      properties:
        active:
          type: boolean
        shelf_id:
          type: integer
        size_id:
          type: integer
        size_name:
          type: integer
    hello:
      type: object
      properties:
        hello_message:
          type: string
        email:
          type: string
        user_id:
          type: integer
        token:
          type: string
    error:
      type: object
      properties:
        error:
          type: string
    confirmation:
      type: object
      properties:
        confirmation:
          type: string